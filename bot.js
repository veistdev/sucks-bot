const { Telegraf, Markup } = require('telegraf');
const mysql = require('mysql2');
const path = require('path');

const bot = new Telegraf('BOT_TOKEN');
const ADMINS = [];

const db = mysql.createPool({
  host: 'host',
  user: 'name',
  password: 'password',
  database: 'suck_bot',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

db.query(`
  CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT PRIMARY KEY,
    username VARCHAR(64),
    balance INT DEFAULT 0,
    throat_level INT DEFAULT 1,
    big_clients_unlocked BOOLEAN DEFAULT FALSE,
    sucks_count INT DEFAULT 0,
    last_suck_time BIGINT DEFAULT 0,
    dildo_level INT DEFAULT 0,
    dildo_last_income BIGINT DEFAULT 0
  )
`);

function registerUser(user_id, username) {
  db.query(
    'INSERT IGNORE INTO users (user_id, username) VALUES (?, ?)',
    [user_id, username || 'unknown']
  );
}

bot.start((ctx) => {
  registerUser(ctx.from.id, ctx.from.username);
  ctx.reply(
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –º–∏–Ω–µ—Ç-—Å–∫–∏–ª–ª–æ–≤!\n\n" +
    "üí¶ –¢—ã –º–æ–∂–µ—à—å —Å–æ—Å–∞—Ç—å –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç (–∏–ª–∏ 15, –µ—Å–ª–∏ –∫—É–ø–∏—à—å —É–ª—É—á—à–µ–Ω–∏–µ).\n" +
    "üìè –ö–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏, –∏ —á–µ–º –≥–ª—É–±–∂–µ —Ç—ã —Å–º–æ–∂–µ—à—å –≤–∑—è—Ç—å, —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç –ø–æ–ª—É—á–∏—à—å!\n\n" +
    "üîπ /suck - –°–¥–µ–ª–∞—Ç—å –º–∏–Ω–µ—Ç\n" +
    "üîπ /shop - –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π\n" +
    "üîπ /top - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
  );
});

bot.command('suck', (ctx) => {
  const user_id = ctx.from.id;
  registerUser(user_id, ctx.from.username);

  db.query('SELECT last_suck_time, big_clients_unlocked FROM users WHERE user_id = ?', [user_id], (err, results) => {
    if (!results || !results[0]) return;
    const last_suck_time = results[0].last_suck_time || 0;
    const big_clients_unlocked = !!results[0].big_clients_unlocked;

    const isAdmin = ADMINS.includes(user_id);
    const cooldown = isAdmin ? 0 : (big_clients_unlocked ? 5 * 60 : 10 * 60);

    const now = Math.floor(Date.now() / 1000);
    if (!isAdmin && now - last_suck_time < cooldown) {
      const remaining = cooldown - (now - last_suck_time);
      const minutes = Math.floor(remaining / 60);
      const seconds = remaining % 60;
      ctx.reply(`‚è≥ –¢—ã —É—Å—Ç–∞–ª! –û—Ç–¥–æ—Ö–Ω–∏ –µ—â—ë ${minutes} –º–∏–Ω—É—Ç ${seconds} —Å–µ–∫—É–Ω–¥.`);
      return;
    }

    const client_size = Math.floor(Math.random() * 26) + 5; 
    db.query('SELECT throat_level FROM users WHERE user_id = ?', [user_id], (err, results2) => {
      const throat_level = results2[0]?.throat_level || 1;
      const max_depth = throat_level * 5;
      let depth, reward, result_msg;

      reward = Math.floor(Math.random() * 16) + 5; 

      if (max_depth >= client_size) {
        depth = client_size;
        result_msg = `‚úÖ –¢—ã —Å–º–æ–≥ –≤–∑—è—Ç—å –í–ï–°–¨ ${client_size} —Å–º! +${reward} –º–æ–Ω–µ—Ç.`;
      } else {
        depth = max_depth;
        result_msg = `üòÆ –¢—ã —Å–º–æ–≥ –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ ${depth} —Å–º –∏–∑ ${client_size} —Å–º... +${reward} –º–æ–Ω–µ—Ç.`;
      }

      db.query(
        `UPDATE users SET balance = balance + ?, sucks_count = sucks_count + 1, last_suck_time = ? WHERE user_id = ?`,
        [reward, now, user_id],
        () => {
          db.query('SELECT sucks_count, balance FROM users WHERE user_id = ?', [user_id], (err, results3) => {
            ctx.reply(
              `üçÜ –†–∞–∑–º–µ—Ä —É –∫–ª–∏–µ–Ω—Ç–∞: ${client_size} —Å–º\n` +
              `${result_msg}\n` +
              `üí¶ –í—Å–µ–≥–æ –º–∏–Ω–µ—Ç–æ–≤: ${results3[0].sucks_count}\n` +
              `üí∞ –ë–∞–ª–∞–Ω—Å: ${results3[0].balance} –º–æ–Ω–µ—Ç`
            );
          });
        }
      );
    });
  });
});

bot.command('givemoney', (ctx) => {
  const admin_id = ctx.from.id;
  if (!ADMINS.includes(admin_id)) {
    ctx.reply('‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
    return;
  }

  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 2) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π: /givemoney <user_id> <amount>');
    return;
  }

  const target_id = parseInt(args[0]);
  const amount = parseInt(args[1]);
  if (isNaN(target_id) || isNaN(amount) || amount <= 0) {
    ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.');
    return;
  }

  db.query('UPDATE users SET balance = balance + ? WHERE user_id = ?', [amount, target_id], function (err, results) {
    if (err) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º–æ–Ω–µ—Ç.');
      return;
    }
    if (results.affectedRows === 0) {
      ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    } else {
      ctx.reply(`‚úÖ –í—ã–¥–∞–Ω–æ ${amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id ${target_id}.`);
    }
  });
});

bot.command('shop', (ctx) => {
  const user_id = ctx.from.id;
  registerUser(user_id, ctx.from.username);

  db.query('SELECT balance, throat_level, big_clients_unlocked, dildo_level FROM users WHERE user_id = ?', [user_id], (err, results) => {
    if (!results || !results[0]) return;
    const { balance, throat_level, big_clients_unlocked, dildo_level } = results[0];
    const next_throat_cost = throat_level * 50;
    const dildo_cost = 300 + dildo_level * 200; // —Ü–µ–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å —É—Ä–æ–≤–Ω–µ–º

    const buttons = [
      [
        Markup.button.callback(
          `üîº –£–ª—É—á—à–∏—Ç—å –≥–ª–æ—Ç–∫—É (–£—Ä. ${throat_level}‚Üí${throat_level + 1}) - ${next_throat_cost} –º–æ–Ω–µ—Ç`,
          `upgrade_throat_${next_throat_cost}_${user_id}`
        )
      ]
    ];

    if (!big_clients_unlocked) {
      buttons.push([
        Markup.button.callback(
          "üîΩ –ö–ª–∏–µ–Ω—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏... 200 –º–æ–Ω–µ—Ç",
          `buy_big_clients_200_${user_id}`
        )
      ]);
    } else {
      buttons.push([
        Markup.button.callback(
          "‚úÖ –ë–æ–ª—å—à–∏–µ –∫–ª–∏–µ–Ω—Ç—ã —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",
          `already_bought_${user_id}`
        )
      ]);
    }

    buttons.push([
      Markup.button.callback(
        dildo_level > 0
          ? `üçÜ –†–µ–∑–∏–Ω–æ–≤—ã–π —á–ª–µ–Ω (—É—Ä. ${dildo_level}) ‚Äî –ø—Ä–∏–Ω–æ—Å–∏—Ç ${dildo_level * 10} –º–æ–Ω–µ—Ç/—á–∞—Å (—É–ª—É—á—à–∏—Ç—å –∑–∞ ${dildo_cost} –º–æ–Ω–µ—Ç)`
          : `üçÜ –ö—É–ø–∏—Ç—å —Ä–µ–∑–∏–Ω–æ–≤—ã–π —á–ª–µ–Ω ‚Äî 300 –º–æ–Ω–µ—Ç`,
        `buy_dildo_${dildo_cost}_${user_id}`
      )
    ]);

    ctx.reply(
      `üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π\nüí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`,
      Markup.inlineKeyboard(buttons)
    );
  });
});

bot.on('callback_query', (ctx) => {
  const user_id = ctx.from.id;
  const data = ctx.callbackQuery.data;
  const chat_id = ctx.chat ? ctx.chat.id : (ctx.update.callback_query.message.chat.id);

  const parts = data.split('_');
  const owner_id = parseInt(parts[parts.length - 1]);
  if (user_id !== owner_id) {
    ctx.answerCbQuery();
    ctx.reply('–¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª –º–∞–≥–∞–∑–∏–Ω, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.');
    return;
  }

  ctx.answerCbQuery();

if (data.startsWith("upgrade_throat_")) {
  const cost = parseInt(parts[2]);
  db.query('SELECT balance FROM users WHERE user_id = ?', [user_id], (err, results) => {
    if (results[0].balance >= cost) {
      db.query('UPDATE users SET balance = balance - ?, throat_level = throat_level + 1 WHERE user_id = ?', [cost, user_id], () => {
        ctx.editMessageReplyMarkup();
        ctx.reply('‚úÖ –ì–ª–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –±—Ä–∞—Ç—å –≥–ª—É–±–∂–µ.');
      });
    } else {
      ctx.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
    }
  });
} else if (data.startsWith("buy_big_clients_")) {
  const cost = parseInt(parts[3]);
  db.query('SELECT balance, big_clients_unlocked FROM users WHERE user_id = ?', [user_id], (err, results) => {
    if (results[0].big_clients_unlocked) {
      ctx.reply("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ!");
      return;
    }
    if (results[0].balance >= cost) {
      db.query('UPDATE users SET balance = balance - ?, big_clients_unlocked = 1 WHERE user_id = ?', [cost, user_id], () => {
        ctx.editMessageReplyMarkup();
        ctx.reply('‚úÖ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–æ–ª—å—à–∏–µ –∫–ª–∏–µ–Ω—Ç—ã! –ö–î —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 15 –º–∏–Ω—É—Ç.');
      });
    } else {
      ctx.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
    }
  });
} else if (data.startsWith("already_bought_")) {
  ctx.reply("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ!");
} else if (data.startsWith("buy_dildo_")) {
  const cost = parseInt(parts[2]);
  db.query('SELECT balance, dildo_level FROM users WHERE user_id = ?', [user_id], (err, results) => {
    if (!results || !results[0]) return;
    const { balance, dildo_level } = results[0];
    if (balance >= cost) {
      db.query(
        'UPDATE users SET balance = balance - ?, dildo_level = dildo_level + 1, dildo_last_income = ? WHERE user_id = ?',
        [cost, Math.floor(Date.now() / 1000), user_id],
        () => {
          ctx.editMessageReplyMarkup();
          ctx.reply(`‚úÖ –†–µ–∑–∏–Ω–æ–≤—ã–π —á–ª–µ–Ω –∫—É–ø–ª–µ–Ω/—É–ª—É—á—à–µ–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç ${((dildo_level + 1) * 10)} –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–π —á–∞—Å.`);
        }
      );
    } else {
      ctx.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
    }
  });
}
});

bot.command('profile', (ctx) => {
  const user_id = ctx.from.id;
  registerUser(user_id, ctx.from.username);

  db.query(
    'SELECT username, balance, throat_level, big_clients_unlocked, sucks_count, dildo_level FROM users WHERE user_id = ?',
    [user_id],
    (err, results) => {
      if (!results || !results[0]) {
        ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }
      const {
        username,
        balance,
        throat_level,
        big_clients_unlocked,
        sucks_count,
        dildo_level
      } = results[0];

      ctx.reply(
        `üë§ –ü—Ä–æ—Ñ–∏–ª—å @${username || 'unknown'}\n` +
        `\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç` +
        `\nüí¶ –ú–∏–Ω–µ—Ç–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: ${sucks_count}` +
        `\nüëÖ –ì–ª—É–±–∏–Ω–∞ –≥–ª–æ—Ç–∫–∏: ${throat_level * 5} —Å–º (—É—Ä. ${throat_level})` +
        `\nüçÜ –†–µ–∑–∏–Ω–æ–≤—ã–π —á–ª–µ–Ω: ${dildo_level > 0 ? `—É—Ä. ${dildo_level} (+${dildo_level * 10} –º–æ–Ω–µ—Ç/—á–∞—Å)` : '–Ω–µ—Ç'}` +
        `\nüìè –ö–ª–∏–µ–Ω—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —á–ª–µ–Ω–∞–º–∏: ${big_clients_unlocked ? '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã' : '–Ω–µ—Ç'}`
      );
    }
  );
});

bot.command('top', (ctx) => {
  db.query('SELECT username, sucks_count FROM users ORDER BY sucks_count DESC LIMIT 10', (err, top_sucks) => {
    db.query('SELECT username, balance FROM users ORDER BY balance DESC LIMIT 10', (err, top_balance) => {
      db.query('SELECT username, throat_level FROM users ORDER BY throat_level DESC LIMIT 10', (err, top_throat) => {
        let top_msg = "üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤** üèÜ\n\n";

        top_msg += "üîù **–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∏–Ω–µ—Ç–æ–≤:**\n";
        top_sucks.forEach((u, i) => {
          top_msg += `${i + 1}. @${u.username} ‚Äî ${u.sucks_count} —Ä–∞–∑\n`;
        });

        top_msg += "\nüí∞ **–ü–æ –±–∞–ª–∞–Ω—Å—É –º–æ–Ω–µ—Ç:**\n";
        top_balance.forEach((u, i) => {
          top_msg += `${i + 1}. @${u.username} ‚Äî ${u.balance} –º–æ–Ω–µ—Ç\n`;
        });

        top_msg += "\nüëÖ **–ü–æ –≥–ª—É–±–∏–Ω–µ –≥–ª–æ—Ç–∫–∏:**\n";
        top_throat.forEach((u, i) => {
          top_msg += `${i + 1}. @${u.username} ‚Äî ${u.throat_level * 5} —Å–º\n`;
        });

        ctx.reply(top_msg, { parse_mode: "Markdown" });
      });
    });
  });
});

setInterval(() => {
  const now = Math.floor(Date.now() / 1000);
  db.query('SELECT user_id, dildo_level, dildo_last_income FROM users WHERE dildo_level > 0', (err, users) => {
    if (!users) return;
    users.forEach(user => {
      const { user_id, dildo_level, dildo_last_income } = user;
      if (dildo_level > 0 && now - dildo_last_income >= 3600) { // 1 —á–∞—Å
        const hours = Math.floor((now - dildo_last_income) / 3600);
        const income = dildo_level * 10 * hours;
        db.query(
          'UPDATE users SET balance = balance + ?, dildo_last_income = ? WHERE user_id = ?',
          [income, dildo_last_income + hours * 3600, user_id]
        );
      }
    });
  });
}, 60 * 1000); 

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
bot.launch();

process.on('unhandledRejection', (reason, promise) => {
  if (
    reason &&
    reason.response &&
    reason.response.error_code === 400 &&
    typeof reason.response.description === 'string' &&
    reason.response.description.includes('query is too old')
  ) {
    return;
  }
  console.error('Unhandled Rejection:', reason);
});
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));